// const ExtractTextPlugin = require('extract-text-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const paths = require('./paths')
const isProduction = process.env.NODE_ENV === 'production';
const shouldUseSourceMap = process.env.GENERATE_SOURCEMAP !== 'false';

const supportedBrowserList = [
    '> 0.75%',
    'last 3 versions',
    'iOS > 7',
    'Android > 4',
    'last 1 and_ff versions',
    'Firefox ESR',
    'not ie < 9' // React doesn't support IE8 anyway
];

// style files regexes
const cssRegex = /\.(sa|sc|c)ss$/
const lessRegex = /\.less$/
const cssModuleRegex = /\.module\.(sa|sc|c)ss$/;

// Plain style loader
const styleLoader = require.resolve('style-loader');
const cacheLoader = require.resolve('cache-loader');
const cssLoader = (isModule) => {
    const loader = {
        loader: require.resolve('css-loader'),
        options: {
            importLoaders: 2,
            sourceMap: shouldUseSourceMap
        }
    };
    if (isModule) {
        Object.assign(loader.options, {
            modules: {
                mode: 'local',
                localIdentName: '[local]_[hash:8]'
            }, //fro tree shaking
            importLoaders: 2
        });
    }
    return loader;
};

// Plain sass loader
const sassLoader = {
    loader: require.resolve('sass-loader'),
    options: {
        sourceMap: shouldUseSourceMap,
        data: `@import "${paths.appScss}";`
    }
};

const lessLoader = {
    loader: require.resolve('less-loader'),
    options: {
        javascriptEnabled: true,
        modifyVars: {
            "@primary-color": "#4f8bff",
            "@border-radius-base": "4px",
            "@menu-highlight-color": "#417ff9",
            "@background-color-light": "#f0f7ff",
            "@text-color":"000000d9" ,
            "@text-color-secondary": "#000000b3"
        }
    }
};

const resolveUrlLoader = {
    loader: require.resolve('resolve-url-loader')
};

// "postcss" loader applies autoprefixer to our CSS.
// "css" loader resolves paths in CSS and adds assets as dependencies.
// "style" loader turns CSS into JS modules that inject <style> tags.
// In development and production, we use a plugin to extract that CSS to a file
const postCssLoader = () => {
    /* eslint-disable global-require */
    const postCss = {
        loader: require.resolve('postcss-loader'),
        options: {
            ident: 'postcss',
            // If a previous loader like e.g sass-loader is applied and it's sourceMap option is set true,
            // but the sourceMap option in postcss-loader is also set true,
            // previous source maps generated by sass-loader will be discarded by postcss-loader entirely.
            // so set sourceMap with inline in postcss-loader will insert the previous source maps(sass-loader)
            // into css file which is outputed by webpack as a DataUR.
            sourceMap: 'inline',
            plugins: () => [
                require('postcss-flexbugs-fixes'),
                require('autoprefixer')({
                    // browsers: supportedBrowserList,
                    flexbox: 'no-2009'
                })
            ]
        }
    };
    return postCss;
    /* eslint-disable global-require */
};


const getStyleLoaders = () => {
    const loaders = (isModule = false, isless) => [
        !isProduction ? styleLoader :
        {
            loader: MiniCssExtractPlugin.loader,
            options: {
                filename: '[name].css',
                chunkFilename: '[id].css',
                esModule: true,
                ignoreOrder: false,
                hmr: !isProduction,
            },
        },
        cacheLoader,
        cssLoader(isModule),
        postCssLoader(),
        // resolveUrlLoader,
        isless? lessLoader : sassLoader
    ]
    const styleRule = {
        test: cssRegex,
        exclude: cssModuleRegex,
        use: loaders()
    }

    const moduleStyleRule = {
        test: cssModuleRegex,
        use: loaders(true, false)
    }

    const lessStyleRule = {
        test: lessRegex,
        use: loaders(false, true)
    }

    return [
        styleRule,
        moduleStyleRule,
        lessStyleRule
    ]
}

module.exports = {
    getStyleLoaders
};
